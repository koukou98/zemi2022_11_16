{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyPh71M/nBbmfXS2scyWemeT"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["pip install homography"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"v2nLoEF1YK6x","executionInfo":{"status":"ok","timestamp":1668481182657,"user_tz":-540,"elapsed":4227,"user":{"displayName":"Kohei Nakama","userId":"13909425089048840505"}},"outputId":"ec317418-3495-41f3-b0f7-1f869a846a82"},"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Collecting homography\n","  Downloading homography-0.1.7-py3-none-any.whl (16 kB)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.7/dist-packages (from homography) (1.21.6)\n","Collecting affine\n","  Downloading affine-2.3.1-py2.py3-none-any.whl (16 kB)\n","Installing collected packages: affine, homography\n","Successfully installed affine-2.3.1 homography-0.1.7\n"]}]},{"cell_type":"code","execution_count":2,"metadata":{"id":"oEpvg0SeVDuc","executionInfo":{"status":"ok","timestamp":1668481185505,"user_tz":-540,"elapsed":708,"user":{"displayName":"Kohei Nakama","userId":"13909425089048840505"}}},"outputs":[],"source":["#import matplotlib.delaunay as md \n","import homography\n","from scipy import ndimage\n","from pylab import *\n","from numpy import *\n","\n","from scipy.spatial import Delaunay\n","    \n","\n","def image_in_image(im1,im2,tp):\n","    \"\"\" Put im1 in im2 with an affine transformation\n","        such that corners are as close to tp as possible.\n","        tp are homogeneous and counter-clockwise from top left. \"\"\" \n","    \n","    # points to warp from\n","    m,n = im1.shape[:2]\n","    fp = array([[0,m,m,0],[0,0,n,n],[1,1,1,1]])\n","    \n","    # compute affine transform and apply\n","    H = homography.Haffine_from_points(tp,fp)\n","    im1_t = ndimage.affine_transform(im1,H[:2,:2],\n","                    (H[0,2],H[1,2]),im2.shape[:2])\n","    alpha = (im1_t > 0)\n","    \n","    return (1-alpha)*im2 + alpha*im1_t\n","\n","\n","def combine_images(im1,im2,alpha):\n","    \"\"\" Blend two images with weights as in alpha. \"\"\"\n","    return (1-alpha)*im1 + alpha*im2    \n","    \n","\n","def alpha_for_triangle(points,m,n):\n","    \"\"\" Creates alpha map of size (m,n) \n","        for a triangle with corners defined by points\n","        (given in normalized homogeneous coordinates). \"\"\"\n","    \n","    alpha = zeros((m,n))\n","\n","    # min(),max()に入る値を必ず整数になるようint()を使う\n","    for i in range(int(min(points[0])),int(max(points[0]))):\n","        for j in range(int(min(points[1])),int(max(points[1]))):\n","            x = linalg.solve(points,[i,j,1])\n","            if min(x) > 0: #all coefficients positive\n","                alpha[i,j] = 1\n","    return alpha\n","    \n","\n","def triangulate_points(x,y):\n","    \"\"\" Delaunay triangulation of 2D points. \"\"\"\n","    \n","    centers,edges,tri,neighbors = md.delaunay(x,y)\n","\n","    return tri\n","\n","\n","def plot_mesh(x,y,tri):\n","    \"\"\" Plot triangles. \"\"\" \n","    \n","    for t in tri:\n","        t_ext = [t[0], t[1], t[2], t[0]] # add first point to end\n","        plot(x[t_ext],y[t_ext],'r')\n","\n","\n","def pw_affine(fromim,toim,fp,tp,tri):\n","    \"\"\" Warp triangular patches from an image.\n","        fromim = image to warp \n","        toim = destination image\n","        fp = from points in hom. coordinates\n","        tp = to points in hom.  coordinates\n","        tri = triangulation. \"\"\"\n","                \n","    im = toim.copy()\n","    \n","    # check if image is grayscale or color\n","    is_color = len(fromim.shape) == 3\n","    \n","    # create image to warp to (needed if iterate colors)\n","    im_t = zeros(im.shape, 'uint8') \n","\n","    for t in tri:\n","        # compute affine transformation\n","        H = homography.Haffine_from_points(tp[:,t],fp[:,t])\n","        \n","        if is_color:\n","            for col in range(fromim.shape[2]):\n","                im_t[:,:,col] = ndimage.affine_transform(\n","                    fromim[:,:,col],H[:2,:2],(H[0,2],H[1,2]),im.shape[:2])\n","        else:\n","            im_t = ndimage.affine_transform(\n","                    fromim,H[:2,:2],(H[0,2],H[1,2]),im.shape[:2])\n","        \n","        # alpha for triangle\n","        alpha = alpha_for_triangle(tp[:,t],im.shape[0],im.shape[1])\n","        \n","        # add triangle to image\n","        im[alpha>0] = im_t[alpha>0]\n","        \n","    return im\n","    \n","    \n","def panorama(H,fromim,toim,padding=2400,delta=2400):\n","    \"\"\" Create horizontal panorama by blending two images \n","        using a homography H (preferably estimated using RANSAC).\n","        The result is an image with the same height as toim. 'padding' \n","        specifies number of fill pixels and 'delta' additional translation. \"\"\" \n","    \n","    # check if images are grayscale or color\n","    is_color = len(fromim.shape) == 3\n","    \n","    # homography transformation for geometric_transform()\n","    def transf(p):\n","        p2 = dot(H,[p[0],p[1],1])\n","        return (p2[0]/p2[2],p2[1]/p2[2])\n","    \n","    if H[1,2]<0: # fromim is to the right\n","        print('warp - right')\n","        # transform fromim\n","        if is_color:\n","            # pad the destination image with zeros to the right\n","            toim_t = hstack((toim,zeros((toim.shape[0],padding,3))))\n","            fromim_t = zeros((toim.shape[0],toim.shape[1]+padding,toim.shape[2]))\n","            for col in range(3):\n","                fromim_t[:,:,col] = ndimage.geometric_transform(fromim[:,:,col],\n","                                        transf,(toim.shape[0],toim.shape[1]+padding))\n","        else:\n","            # pad the destination image with zeros to the right\n","            toim_t = hstack((toim,zeros((toim.shape[0],padding))))\n","            fromim_t = ndimage.geometric_transform(fromim,transf,\n","                                    (toim.shape[0],toim.shape[1]+padding)) \n","    else:\n","        print('warp - left')\n","        # add translation to compensate for padding to the left\n","        H_delta = array([[1,0,0],[0,1,-delta],[0,0,1]])\n","        H = dot(H,H_delta)\n","        # transform fromim\n","        if is_color:\n","            # pad the destination image with zeros to the left\n","            toim_t = hstack((zeros((toim.shape[0],padding,3)),toim))\n","            fromim_t = zeros((toim.shape[0],toim.shape[1]+padding,toim.shape[2]))\n","            for col in range(3):\n","                fromim_t[:,:,col] = ndimage.geometric_transform(fromim[:,:,col],\n","                                            transf,(toim.shape[0],toim.shape[1]+padding))\n","        else:\n","            # pad the destination image with zeros to the left\n","            toim_t = hstack((zeros((toim.shape[0],padding)),toim))\n","            fromim_t = ndimage.geometric_transform(fromim,\n","                                    transf,(toim.shape[0],toim.shape[1]+padding))\n","    \n","    # blend and return (put fromim above toim)\n","    if is_color:\n","        # all non black pixels\n","        alpha = ((fromim_t[:,:,0] * fromim_t[:,:,1] * fromim_t[:,:,2] ) > 0)\n","        for col in range(3):\n","            toim_t[:,:,col] = fromim_t[:,:,col]*alpha + toim_t[:,:,col]*(1-alpha)\n","    else:\n","        alpha = (fromim_t > 0)\n","        toim_t = fromim_t*alpha + toim_t*(1-alpha)\n","    \n","    return toim_t\n","\n"]}]}